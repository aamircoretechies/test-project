import { Component, OnInit } from "@angular/core";
import { AppComponent } from "src/app/app.component";
import {
  FormGroup,
  FormArray,
  FormControl,
  FormBuilder,
  Validators
} from "@angular/forms";
import { Router, ActivatedRoute } from "@angular/router";
import { ApiService } from "src/app/service/api.service";

@Component({
  selector: "app-order-start",
  templateUrl: "./order-start.component.html",
  styleUrls: ["./order-start.component.css"]
})
export class OrderStartComponent implements OnInit {
  isUserLogin = false;
  services: any = [];
  bags: any = [];
  otherServices: any = [];
  user_id: any = 0;
  customer_id: any = 0;
  active_tab: any = 0;
  cartItems: any = new Array();
  cartTotalAmt: number = 0;

  constructor(
    private fb: FormBuilder,
    private router: Router,
    public myapp: AppComponent,
    private route: ActivatedRoute,
    private api: ApiService
  ) {}

  ngOnInit() {
    window.scrollTo(0, 0);
    //Login Access Validation
    this.isUserLogin = this.api.isUserLogin();

    this.user_id = localStorage.getItem("webUserId");
    this.customer_id = localStorage.getItem("webCustomerId");
    this.loadServices();
    //localStorage.clear();
  }

  loadServices() {
    this.api.callAPI(null, "getAllServices").subscribe(res => {
      if (res.status === true) {
        this.services = res.data;
        //console.log("Services", this.services);
        if (this.services[0].items) {
          this.bags = this.services[0].items;
        }

        for (let i = 0; i < this.services.length; i++) {
          if (this.services[i].service_type != "box") {
            this.otherServices.push(this.services[i]);
          }
        }
        //console.log("bag data", this.bags);
        console.log("otherServices: ", this.otherServices);
      }
    });

    //Assign session cart data into variable
    if (localStorage.getItem("cartItems")) {
      this.cartItems = [];
      let items = JSON.parse(localStorage.getItem("cartItems"));
      this.cartItems = items;
      //this.calculateCartTotal();
    }
  }

  //Show/Hide service items tab
  /*showHideTab(index) {
    this.active_tab = index;
    return false;
  }*/

  //Function to Increase qty of Item in Cart
  increaseQty(si: any, ii: any) {
    let serviceName = this.services[si].service_name;
    let serviceId = this.services[si].service_id;
    let itemId = this.services[si].items[ii].item_id;
    let itemName = this.services[si].items[ii].item_name;
    let price = this.services[si].items[ii].price;

    let cartData = { itemId: itemId, itemName: itemName, price: price, qty: 1 };
    console.log("items to add", cartData);

    let index = -1;
    //First search itemId is exit or not in the CART
    for (var i = 0; i < this.cartItems.length; i++) {
      for (var j = 0; j < this.cartItems[i].items.length; j++) {
        if (this.cartItems[i]["items"][j].itemId === itemId) {
          index = j;
          break;
        }
      }
    }
    //console.log("found index: " + index);
    if (index < 0) {
      this.cartItems[si]["items"].push(cartData); //Insert the Items in Cart
    } else {
      //Update the Items in Cart
      this.cartItems[si]["items"][index].qty++;
      this.cartItems[si]["items"][index].price =
        price * this.cartItems[si]["items"][index].qty;
    }
    //this.calculateCartTotal();
    //this.checkServiceItemExist(index);
    console.log("Cart items", this.cartItems);
    //console.log("total items: " + this.cartItems.length);
  }

  //Function to Decrease qty of Item in Cart
  decreaseQty(si: any, ii: any) {
    //let serviceName = this.services[si].service_name;
    //let serviceId = this.services[si].service_id;
    let itemId = this.services[si].items[ii].item_id;
    //let itemName = this.services[si].items[ii].item_name;
    let price = this.services[si].items[ii].price;

    let index = -1;
    //First search itemId is exit or not in the CART
    for (var i = 0; i < this.cartItems.length; i++) {
      for (var j = 0; j < this.cartItems[i].items.length; j++) {
        if (this.cartItems[i]["items"][j].itemId === itemId) {
          index = j;
          break;
        }
      }
    }

    if (index >= 0) {
      //Update the Items in Cart
      this.cartItems[si]["items"][index].qty--;
      this.cartItems[si]["items"][index].price =
        price * this.cartItems[si]["items"][index].qty;

      //If qty reaches to 0, then remove the item from cart
      if (this.cartItems[si]["items"][index].qty == 0) {
        this.cartItems[si]["items"].splice(index, 1);
      }
    }
    //this.calculateCartTotal();
    //this.checkServiceItemExist(index);
    //console.log("Cart items", this.cartItems);
    //console.log("total items: " + this.cartItems.length);
  }

  //Function to display value in qty textbox
  /*getQuantity(si: any, ii: any, item_id: any) {
    let qty = "0";
    //First search itemId is exit or not in the CART
    for (var i = 0; i < this.cartItems.length; i++) {
      for (var j = 0; j < this.cartItems[i].items.length; j++) {
        if (this.cartItems[i]["items"][j].itemId === item_id) {
          qty = this.cartItems[si]["items"][j].qty;
          break;
        }
      }
    }

    return qty;
  }*/

  //Function to check items in exist or not in the service in Cart
  /*checkServiceItemExist(i) {
    //console.log("item index: " + this.cartItems[i].items.length);
    //First search itemId is exit or not in the CART
    if (this.cartItems[i].items.length) return true;
    else return false;
  }*/

  //Function to calculate cart total
  /*calculateCartTotal() {
    let totalAmt: any = 0;
    let totalCartItems: any = 0;
    //First search itemId is exit or not in the CART
    for (var i = 0; i < this.cartItems.length; i++) {
      for (var j = 0; j < this.cartItems[i].items.length; j++) {
        let total = parseFloat(this.cartItems[i]["items"][j].price);
        totalAmt = totalAmt + total;

        totalCartItems = totalCartItems + this.cartItems[i]["items"][j].qty;
      }
    }
    this.cartTotalAmt = totalAmt; //toFixed(2);
    //console.log("cart total: " + this.cartTotalAmt);

    //store the cart items in session
    window.localStorage.setItem("cartItems", JSON.stringify(this.cartItems));
    window.localStorage.setItem("cartCount", totalCartItems);
    this.myapp.cartCount = totalCartItems;
  }

  //Function to add cart items in session
  addCartToSession() {
    this.router.navigate(["../pickup"]);
  }*/
}
